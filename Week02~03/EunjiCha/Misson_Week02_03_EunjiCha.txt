------------------------------------------------------------------------------------------------------------------------------------------
[Docker]
-. 특정 작업의 업무환경 → 도커 허브에 저장(클라우드와 비슷한 개념)
-. 저장된 환경을 언제든지 불러오고, 복사할 수 있음(사본은 도커 허브에만 그대로 보관)

-. ex)서버 신규 구축 시, 언어/툴/프로그램(버전 별) 처음부터 다시 구축해야함.
-. ex)같은 서버에서 다른 서비스들을 동시에 실행시켜야할 경우(각각 다른 버전 사용), 버전별 환경을 각각 따로 구축해야함.
-. 해결책  
   : 도커 → 각 요소들이 설치된 모습을 '이미지' 파일로 저장 → Docker Hub → 공유/다운받아서 환경 구축 
     컨테이너 → 각각의 작업환경을 구축해놓은 별도의 공간(?) (다른 작업환경과 독립적으로 작동하므로 서로 영향X)

[MSA]
-. ex)빌드 : 40개의 Commit → 27번째에서 오류 발생? → 처음부터 다시 전체 빌드 
-. 해결책
    : 큰 규모의 Application → 작은 규모의 Application으로 쪼개서 빌드 
   			 (변경작업이 필요한 특정 서비스만 업데이트 → 타 서비스  영향↓)
			 (다른 서비스의 내부 구조를 알지 못해도, 변경할 서비스 코드만 업데이트하면 됨)
-. 방향성
1) (조직)DevOps : 운영+개발조직 
2) (딜리버리 파이프라인) CI/CD
3) (어플리케이션) MSA

-. API를 통해 서비스-서비스간 커뮤니케이션 (서로 동작확인)
   (기존 : XML, Soap등으로 서비스 간 통신)

-. Digital Transformation : 고객이 원하는 서비스를 빠르게 Update + Agile한 방법

-. 모놀리식 앱 : (전통방식) 전체 빌드 / 공통 데이터 베이스 

-. DAUM 사례 : 메인화면 팀 ↔ 메일 팀 / 카페 팀(API 인터페이스를 통해 로그인 시 메일개수/카페개수 등을 불러오는것)

-. AWS 기반 마이크로서비스 아키텍처 패턴 
 1) 일반적인 클라우드 아키텍처 : 인스턴스 기반 (넷플릭스)
 2) 컨테이너 사용
 3) 서버리스 : 인스턴트X

------------------------------------------------------------------------------------------------------------------------------------------
[느낀점]
이미 많은 회사들이 MSA로의 서비스 전환을 진행하고 있다. 
MSA는 단지 서비스를 구축/업데이트 하는 툴일 뿐이고, 이를 제대로 활용하기 위해서는 조직적으로나 기술적으로 많은 준비가 필요하다.
특히 오토에버 같은 경우는 도커나 파이프라인 구축 등 기술적으로는 많은 움직임을 보이고 있긴 하지만, 조직적으로 DevOps 방식으로의 
움직임은 아직 많이 부족한 것 같다. 그리고 다양한 고객시스템이나 서비스를 체계적으로 분리함으로써 API간 통신을 통해 MSA를 구축해야하는데
이러한 변화가 잘 이루어지려면 큰 노력과 인식의 변화가 필요할 것이다. 